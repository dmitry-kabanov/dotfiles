"
" vim:foldmethod=marker
" vim:foldlevel=0

if exists("g:vscode")
  " Visual Studio Code extension
  nnoremap j gj
  nnoremap k gk
  finish
else
  " Ordinary Vim (or Neovim)
endif

if has('nvim')
  let g:python3_host_prog = '/opt/homebrew/bin/python3'
endif

" Preamble - nocompatible {{{
" Use Vim settings, rather than Vi settings.
set nocompatible
" }}}

" Plugins (managed by vim plug) {{{
" if has('nvim')
"     call plug#begin('~/.local/share/nvim/plugged')
" else
     call plug#begin('~/.vim/plugged')
" endif

if has("nvim")
  " Syntax highlighting.
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
endif

" A code-completion engine for Vim.
Plug 'Valloric/YouCompleteMe', { 'do': 'python3 install.py --clangd-completer' }
" Generate .ycm_extra_conf.py for YouCompleteMe.
Plug 'rdnetto/YCM-Generator', { 'branch': 'stable'}
" FZF provides list filtration.
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
" More advanced FZF plugin to select files, buffers, etc.
Plug 'junegunn/fzf.vim'
" Asynchronous Lint Engine.
Plug 'dense-analysis/ale'
" Drawer with functions/classes in a current file.
Plug 'majutsushi/tagbar'

" Git integration.
Plug 'tpope/vim-fugitive'
Plug 'airblade/vim-gitgutter'
Plug 'jreybert/vimagit'

" EditorConfig plugin.
Plug 'editorconfig/editorconfig-vim'
" Run external commands asynchronously.
Plug 'tpope/vim-dispatch'
" Asynchronous search in Vim with different search tools (ag, rg, etc.).
Plug 'mhinz/vim-grepper'
" Run your tests at the speed of thought.
Plug 'vim-test/vim-test'
" Send text to REPL.
Plug 'jpalardy/vim-slime'
" Collection of language packs.
Plug 'sheerun/vim-polyglot'

" --- Tmux.
Plug 'tmux-plugins/vim-tmux' 
" Transparently switch between tmux panes and vim split windows.
Plug 'christoomey/vim-tmux-navigator'

" Mappings for command mode in Emacs style.
Plug 'vim-utils/vim-husk'  

" Statusline.
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'

" Snippets.
Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

" --- Editing
" Enter paired delimiters.
Plug 'Raimondi/delimitMate'
" Align text.
Plug 'godlygeek/tabular'
" Turn on CAPS LOCK.
Plug 'tpope/vim-capslock'
" Repeat.vim remaps . in a way that plugins can tap into it.
Plug 'tpope/vim-repeat'
" Change delimiters quickly: for example change 'word' to "word".
Plug 'tpope/vim-surround'
" Comment and uncomment quickly.
Plug 'tpope/vim-commentary'
" Show Unicode, emoji and HTML names of a character when pressing `ga`.
Plug 'tpope/vim-characterize'

" -- Color schemes.
Plug 'morhetz/gruvbox'                  " Retro groove color scheme.
Plug 'altercation/vim-colors-solarized' " Famous solarized color scheme.
Plug 'lifepillar/vim-solarized8'        " Modern version of the Solarized theme
Plug 'chriskempson/base16-vim'          " Popular base16 color schemes.
Plug 'rakr/vim-one'                     " Adaptation of the Atom color scheme.
Plug 'jeffkreeftmeijer/vim-dim'         " Clone of Vim’s default colorscheme, with some improvements. 
Plug 'rakr/vim-two-firewatch'           " A blend between duotone light and firewatch for atom.
Plug 'ayu-theme/ayu-vim'                " Modern theme for modern VIMs.

" Interactive REPLs Over Neovim.
Plug 'kassio/neoterm'

" --- Plugins that improve support of different file types.
" Python.
" Fix python indentation.
Plug 'hynek/vim-python-pep8-indent'
" Improve syntax highlighting for Python code.
Plug 'vim-python/python-syntax'
Plug 'snakemake/snakemake', {'rtp': 'misc/vim'}
Plug 'phelipetls/vim-hugo'
Plug 'rust-lang/rust.vim'

" Markdown.
" Improved Markdown syntax.
Plug 'plasticboy/vim-markdown'
" Instant markdown preview.
function! _BuildComposer(info)
  if a:info.status != 'unchanged' || a:info.force
    if has('nvim')
      !cargo build --release
    else
      !cargo build --release --no-default-features --features json-rpc
    endif
  endif
endfunction
Plug 'euclio/vim-markdown-composer', { 'do': function('_BuildComposer') }

" Latex.
Plug 'lervag/vimtex'

" Julia
Plug 'JuliaEditorSupport/julia-vim'

" Add plugins to &runtimepath.
call plug#end()
runtime macros/matchit.vim
" }}}

" Options for the editor itself {{{
" Enable file type detection and do language-dependent indenting.
filetype plugin indent on

" Enable syntax highlighting.
syntax enable

" Autoindent when starting new line, or using `o` or `O`.
set autoindent

" Backspace over autoindent, line breaks, start of insert.
set backspace=indent,eol,start

" Don't scan included files. The .tags file is more performant.
set complete-=i

" Use 'shiftwidth' when using `<Tab>` in front of a line.
" By default it's used only for shift commands (`<`, `>`).
set smarttab

" Default indentation settings.
set expandtab     " Replace \t characters with spaces.
set shiftwidth=4  " Number of space characters for indentation commands like >.
set tabstop=4     " Number of space characters used to visualize \t character.
set softtabstop=4 " Number of spaces that a <Tab> counts for while editing.

" Set `UTF-8` encoding.
set encoding=utf-8

" Allow for mappings including `Esc`, while preserving
" zero timeout after pressing it manually.
set ttimeout
set ttimeoutlen=100

" Hide backup and swap files by putting them in the `tmp` directory.
set backupdir=~/.vim/tmp//
set directory=~/.vim/tmp//

" Allow to switch between buffers even if the current buffer is modified.
set hidden

" Show the possible matches just above the command line after pressing <TAB>.
set wildmenu

" Complete the next full match.
set wildmode=longest,full

" Ignore patterns for filename completion.
" Archive patterns.
set wildignore+=*.zip,*.tar.gz,*.tar.bz2,*.tar.xz,*.rar
" Python patterns.
set wildignore+=*.pyc,*/__pycache__/*,*.so
" C/C++ patterns.
set wildignore+=*.o

" Stop showing annoying preview window during autocompletion.
set completeopt-=preview

set keymap=russian-jcukengost
set iminsert=0
set imsearch=0

" Check spelling.
set spell
set spelllang=en_us,ru

" Delete comment character when joining commented lines.
if v:version > 703 || v:version == 703 && has("patch541")
  set formatoptions+=j
endif

" Search upwards for `tags` file instead only locally.
if has('path_extra')
    setglobal tags-=./tags tags^=./tags;
endif

" Reload unchanged files automatically.
set autoread

" Map <Leader> key to <Space> key.
let mapleader = "\<Space>"

" Map <LocalLeader> key to backslash key.
let maplocalleader = "\<CR>"

" Always move up and down by visual lines.
nnoremap k gk
nnoremap j gj

" Make `Y` to work from the cursor to the end of line, which is more logical
" (compare: C, D) but not Vi-compatible.
map Y y$

" Mapping for saving current buffer to file.
" Shortcut `fs` stands for "file, save".
nmap <Leader>fs :update<CR>

nnoremap <silent> [b :bprevious<CR>
nnoremap <silent> ]b :bnext<CR>
nnoremap <silent> [B :bfirst<CR>
nnoremap <silent> ]B :blast<CR>

function! TrimWhitespace()
    let l:save = winsaveview()
    keeppatterns %s/\s\+$//e
    call winrestview(l:save)
endfun

" Mapping for removing trailing whitespace from the current buffer.
nnoremap <Leader>fw :call TrimWhitespace()<CR>
" }}}

" Search options {{{
" Turn on incremental search.
set incsearch

" Highlight search matches.
set hlsearch

" Use mapping to clear the highlighting of `:set hlsearch`.
nnoremap <silent> <Leader>z :nohlsearch<CR>

" Use smart detection of case-sensitive or case-insensitive search.
set ignorecase
set smartcase
" }}}

" UI options {{{
" Set minimal number of screen lines to keep above and below the cursor.
set scrolloff=1

set termguicolors
let &t_8f = "\e[38;2;%lu;%lu;%lum"
let &t_8b = "\e[48;2;%lu;%lu;%lum"

let &t_ut = ''

if has('mac')
    " This is only necessary if you use "set termguicolors".
    " See https://github.com/vim/vim/issues/3608
    let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
    let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

    set termguicolors
    set background=light
    let g:gruvbox_contrast_light="hard"
    colorscheme gruvbox
else
    if $COLORTERM == 'gnome-terminal'
        let g:solarized_termcolors=16
        set t_Co=256
    endif

    if $SSH_CONNECTION
        set background=dark
    else
        set background=dark
    endif
    colorscheme gruvbox
endif

" Font
if has("gui_macvim")
    set guifont=Consolas\ for\ Powerline:h18
endif

if has("gui_gtk2")
    set guifont=Cousine\ 14
endif

" Highlight line under cursor.
set cursorline

" Make 80th column visible to help restrict line width.
set colorcolumn=80

" Show line numbers.
set number

" Show relative line numbers.
set relativenumber

" Always show window status line, even if there's only one window.
set laststatus=2

" Turn off showing current mode in command line.
set noshowmode

" Enable visual bell instead of beeping.
set visualbell

" Shortcut for rapidly toggle 'set list'
nmap <Leader>lws :set list!<CR>
" Custom symbols for invisible symbols such as tab and EOL
set listchars=tab:»\ ,eol:¬

" Show partial command in the last line of the screen.
set showcmd

" Lazy redrawing (helps with vim-tex performance issues).
set lazyredraw
" }}}

" Terminal options {{{
if exists(":tnoremap")
    tnoremap <Esc> <C-\><C-n>
    " Send <Esc> to terminal by using ability to insert nondigit literally.
    " From "Modern Vim", p. 73.
    tnoremap <C-v><Esc> <Esc>

    tnoremap <A-h> <C-\><C-n><C-w>h
    tnoremap <A-j> <C-\><C-n><C-w>j
    tnoremap <A-k> <C-\><C-n><C-w>k
    tnoremap <A-l> <C-\><C-n><C-w>l
endif
autocmd BufEnter term://* :startinsert
" }}}

" Options for FZF {{{
nnoremap <C-p> :<C-u>FZF<CR>
" }}}

" Options for fzf.vim {{{
nnoremap <Leader>ff :Files<CR>
nnoremap <Leader>bb :Buffers<CR>
" }}}

" Options for Asynchronous Lint Engine {{{
" Make lists for linters and fixers empty, forcing to choose what to use.
let g:ale_linters = {}
let g:ale_fixers = {}
let g:ale_fix_on_save = 1
" Parse a compilation database (compile_commands.json file).
let g:ale_c_parse_compile_commands = 1

" Mappings in the style of unimpaired-next
nmap <silent> [W <Plug>(ale_first)
nmap <silent> [w <Plug>(ale_previous)
nmap <silent> ]w <Plug>(ale_next)
nmap <silent> ]W <Plug>(ale_last)
" }}}

" Options for Grepper {{{
let g:grepper = {}
let g:grepper.tools = ['rg', 'grep', 'git']

" Search for the current word.
nnoremap <Leader>* :Grepper -cword -noprompt<CR>
nnoremap <Leader>/ :Grepper<CR>

" Search for the current selection.
nmap gs <Plug>(GrepperOperator)
xmap gs <Plug>(GrepperOperator)
" }}}

" Options for Ultisnips {{{
let g:UltiSnipsExpandTrigger="<C-j>"
let g:UltiSnipsJumpForwardTrigger = "<C-j>"
let g:UltiSnipsJumpBackwardTrigger = "<C-k>"

" Options for python.
let g:ultisnips_python_quoting_style="single"
let g:ultisnips_python_triple_quoting_style="double"
let g:ultisnips_python_style="numpy"
" }}}

" Options for YouCompleteMe {{{
let g:ycm_enable_semantic_highlighting = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_python_binary_path = 'python'
let g:ycm_server_use_vim_stdout = 0
let g:ycm_server_keep_logfiles = 1
let g:ycm_confirm_extra_conf = 0
" Show signature in popup.
let g:ycm_auto_trigger = 1
let g:ycm_semantic_triggers =  {
\   'c,cpp,objc': [ 're!\w{3}', '_' ],
\ }
let g:ycm_clangd_args = ["--header-insertion=never"]

let g:ycm_language_server =
  \ [
  \   {
  \     'name': 'yaml',
  \     'cmdline': [ '/path/to/yaml/server/yaml-language-server', '--stdio' ],
  \     'filetypes': [ 'yaml' ]
  \   },
  \   {
  \     'name': 'godot',
  \     'filetypes': [ 'gdscript' ],
  \     'port': 6008,
  \     'project_root_files': [ 'project.godot' ]
  \    },
  \   {
  \     'name': 'cmake',
  \     'cmdline': [ 'cmake-language-server' ],
  \     'filetypes': [ 'cmake' ],
  \   }
  \ ]

" This options controls whether or not YCM shows documentation in a popup
" at the cursor location after a short delay.
let g:ycm_auto_hover = ''
nmap K <plug>(YCMHover)
nmap gd <plug>(YCM GoTo)
" }}}

" Options for vim-airline {{{
let g:airline_theme = 'twofirewatch'
let g:airline#extensions#ale#enabled = 1
let g:airline#extensions#keymap#enabled = 0
let g:airline_left_sep=''
let g:airline_right_sep=''
let g:airline_powerline_fonts=1

" Customization of the symbols used by vim-airline.
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif
let g:airline_symbols.spell = 'Ꞩ'

let g:airline_mode_map = {
  \ '__' : '-',
  \ 'n'  : 'N',
  \ 'i'  : 'I',
  \ 'R'  : 'R',
  \ 'c'  : 'C',
  \ 'v'  : 'V',
  \ 'V'  : 'SV',
  \ '' : '^V',
  \ 's'  : 'S',
  \ 'S'  : 'SS',
  \ '' : '^S',
  \ }
" }}}

" Options for vimtex {{{
let g:tex_flavor = 'latex'
let g:vimtex_fold_enabled = 0
let g:vimtex_view_method='skim'
set conceallevel=1
let g:tex_conceal = 'abdmg'

" Configure YouCompleteMe to use vimtex autocompletion.
if !exists('g:ycm_semantic_triggers')
let g:ycm_semantic_triggers = {}
endif
let g:ycm_semantic_triggers.tex = g:vimtex#re#youcompleteme
" }}}

" Options for vim-markdown {{{
let g:vim_markdown_math=1
let g:vim_markdown_folding_disabled=1
" }}}

" Options for vim-tmux-navigator {{{
let g:tmux_navigator_no_mappings = 1

" On macOS, the mappings with Alt do not work (at least, in Iterm).
" However, literally entering them via `Ctrl-V` works.
if has('mac')
    nnoremap <silent> h :TmuxNavigateLeft<cr>
    nnoremap <silent> j :TmuxNavigateDown<cr>
    nnoremap <silent> k :TmuxNavigateUp<cr>
    nnoremap <silent> l :<C-U>TmuxNavigateRight<cr>
    nnoremap <silent> \ :TmuxNavigatePrevious<cr>
else
    nnoremap <silent> <A-h> :<C-U>TmuxNavigateLeft<cr>
    nnoremap <silent> <A-j> :<C-U>TmuxNavigateDown<cr>
    nnoremap <silent> <A-k> :<C-U>TmuxNavigateUp<cr>
    nnoremap <silent> <A-l> :<C-U>TmuxNavigateRight<cr>
    nnoremap <silent> <A-\> :<C-U>TmuxNavigatePrevious<cr>
endif

" Write current buffer before navigating from vim to tmux pane.
let g:tmux_navigator_save_on_switch = 1
" }}}

" Options for python-syntax {{{
let g:python_highlight_class_vars = 1
" }}}

" Options for neoterm {{{
let g:neoterm_default_mod = ':rightbelow'
let g:neoterm_automap_keys = ',tt'

nnoremap <silent> <f10> :TREPLSendFile<cr>
nnoremap <silent> <f9> :TREPLSendLine<cr>
vnoremap <silent> <f9> :TREPLSendSelection<cr>
" }}}

" Options for vim-slime {{{
let g:slime_target = "tmux"
let g:slime_default_config = {"socket_name": "default", "target_pane": "{last}"}
" Use %cpaste feature of ipython.
let g:slime_python_ipython = 1
" }}}

" Options for vim-test {{{
let test#strategy = "vimterminal"
nnoremap <LocalLeader>tt :TestNearest<CR>
" }}}

" Options for neovim-treesitter {{{
if has("nvim")
lua <<EOF
require'nvim-treesitter.configs'.setup {
  ensure_installed = {
    "python",
    "fortran",
    "bash",
    "c",
    "cpp",
    "bibtex",
    "latex",
  },
  -- Install languages synchronously (only applied to `ensure_installed`)
  sync_install = false,
  -- List of parsers to ignore installing
  ignore_install = { "haskell" },
  highlight = {
    -- `false` will disable the whole extension
    enable = true,
    -- list of language that will be disabled
    disable = { "" },
    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
  indent = {
    -- dont enable this, messes up python indentation
    enable = false,
    disable = {},
  },
}
EOF
" Folding
set foldexpr=nvim_treesitter#foldexpr()
set foldmethod=expr
set foldlevel=4  " Avoid folds initially
endif
" }}}

" Options for debugging with termdebug {{{
" Load termdebug to use gdb directly in vim
" and define traditional shortcuts to improve UX.
packadd termdebug
noremap <F5> :Termdebug %:t:r<CR>
map <F10> :call TermDebugSendCommand('next')<CR>
noremap <F11> :call TermDebugSendCommand('step')<CR><ESC>
" }}}

" Options for fugitive {{{
noremap <Leader>gg :Git<CR>
" }}}

" Abbreviations for entering emojis {{{
iabbrev :rocket: 🚀
iabbrev :bomb: 💣
iabbrev :link: 🔗
iabbrev :info: 🛈
iabbrev :grin: 😀
iabbrev :^^: 😊 " Smiling Face with Smiling Eyes
iabbrev :blush: 😊  " Blushing face
iabbrev :lol: 😂
iabbrev :+1: 👍
iabbrev :zzz: 😴  " Sleeping face
iabbrev :tada: 🎉
iabbrev :cool: 😎
iabbrev :heart_eyes: 😍
" }}}

if filereadable(glob("./vimrc.local"))
    echo "Executing ./vimrc.local"
    source ./vimrc.local
endif

if !empty($PROJECT_VIMRC) && filereadable(glob($PROJECT_VIMRC . "/vimrc.local"))
    echo "Executing " . $PROJECT_VIMRC . "/vimrc.local"
    source $PROJECT_VIMRC/vimrc.local
endif

set titlestring="test-title-string"
